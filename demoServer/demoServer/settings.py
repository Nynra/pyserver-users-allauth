"""
Django settings for demoServer project.

Generated by 'django-admin startproject' using Django 4.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-412hzt@tpj0e2m!2+f#n53&tp%3bz0es9#79u8jiiv@s^s@zl!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    # Standard django apps
    'django.contrib.admin',  # Required by allauth
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',  # Required by allauth
    "whitenoise.runserver_nostatic",  # Use whitenoise even in development
    'django.contrib.staticfiles',
    # Custom apps
    'pyserver_tools',  # Needed for pyserver_users_allauth
    'pyserver_users_allauth',
    # Allauth apps
    "allauth",  
    "allauth.account",  
    "allauth.socialaccount",  
    "django.contrib.sites",
    # The allauth providers
    "allauth.socialaccount.providers.openid_connect",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware", # Whitenoise middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    "allauth.account.middleware.AccountMiddleware", # Allauth middleware
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'demoServer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, "templates"),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # Request context required by allauth
                "django.template.context_processors.request",
            ],
        },
    },
]

WSGI_APPLICATION = 'demoServer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# user validation for allauth
AUTH_USER_MODEL = "pyserver_users_allauth.User"
LOGIN_URL = "account_login"
LOGIN_REDIRECT_URL = "account_email"
LOGOUT_REDIRECT_URL = "account_login"

SOCIALACCOUNT_PROVIDERS = {
    "openid_connect": {
        "EMAIL_AUTHENTICATION": True,  # Fully trust authelia to verify the email
        "APPS": [
            {
                "provider_id": "authelia",
                "name": "Authelia",
                "client_id": "INVALID DUMMY PASSWORD",
                "secret": "INVALID DUMMY PASSWORD",
                "settings": {
                    "server_url": "https://auth.example.com/.well-known/openid-configuration",
                },
            }
        ],
    }
}

SITE_ID = 1  # Required for allauth
ACCOUNT_TEMPLATE_PATH = "pyserver_users_allauth/account/"
ACCOUNT_USER_MODEL_USERNAME_FIELD = "username"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_CHANGE_EMAIL = False  # For this demo server, we don't allow changing email
ACCOUNT_EMAIL_VERIFICATION = "none"  # Disable email verification
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_LOGIN_METHODS = {"email"}

# Autocreate a new user model when a new user logs in
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_ONLY = False

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Authentication for django
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",  # Needed for admin interface
    "allauth.account.auth_backends.AuthenticationBackend",  # Allauth backend
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "templates"),
]

# Use whitenoise to serve static files
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
